package com.snaildev;

import com.snaildev.bean.UserModel;
import org.junit.*;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.*;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.core.namedparam.SqlParameterSourceUtils;
import org.springframework.jdbc.core.simple.SimpleJdbcCall;
import org.springframework.jdbc.core.simple.SimpleJdbcInsert;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.jdbc.object.*;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;

import javax.sql.DataSource;
import java.lang.reflect.Type;
import java.sql.*;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SqlQueryTest {
    private static JdbcTemplate jdbcTemplate;

    @BeforeClass
    public static void setupClass() {
        String url = "jdbc:hsqldb:mem:test";
        String username = "sa";
        String password = "";

        DriverManagerDataSource dataSource = new DriverManagerDataSource(url, username, password);
        dataSource.setDriverClassName("org.hsqldb.jdbcDriver");
        jdbcTemplate = new JdbcTemplate(dataSource);
    }

    @Before
    public void setUp() {
        String createTableSql = "create memory table test(id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, name varchar(100))";
        jdbcTemplate.update(createTableSql);

        String createHsqldbFunctionSql = "CREATE FUNCTION FUNCTION_TEST(str CHAR(100)) returns INT begin atomic return length(str);end";
        jdbcTemplate.update(createHsqldbFunctionSql);

        String createHsqldbProcedureSql = "CREATE PROCEDURE PROCEDURE_TEST(INOUT inOutName VARCHAR(100), OUT outId INT) " +
                "MODIFIES SQL DATA BEGIN ATOMIC " +
                "INSERT INTO test(name) VALUES(inOutName); " +
                "SET outId = IDENTITY(); " +
                "SET inOutName='Hello,'+inOutName;" +
                "END";
        jdbcTemplate.update(createHsqldbProcedureSql);
    }

    @After
    public void tearDown() {
        jdbcTemplate.execute("DROP FUNCTION FUNCTION_TEST");
        jdbcTemplate.execute("DROP PROCEDURE PROCEDURE_TEST");
        String dropTableSql = "drop table test";
        jdbcTemplate.execute(dropTableSql);
    }

    @Test
    public void testSimpleJdbcTemplate() {
        // // SimpleJdbcTemplate spring 4.3 已移除
        //SimpleJdbcTemplate simpleJdbcTemplate = new SimpleJdbcTemplate(jdbcTemplate);
        //String insertSql = "insert into test(id, name) values(?, ?)";
        //simpleJdbcTemplate.update(insertSql, 10, "name5");
        //String selectSql = "select * from test where id=? and name=?";
        //List<Map<String, Object>> result = simpleJdbcTemplate.queryForList(selectSql, 10, "name5");
        //Assert.assertEquals(1, result.size());
        //RowMapper<UserModel> mapper = new UserRowMapper();
        //List<UserModel> result2 = simpleJdbcTemplate.query(selectSql, mapper, 10, "name5");
        //Assert.assertEquals(1, result2.size());
    }

    @Test
    public void testSqlQuery() {
        SqlQuery query = new UserModelSqlQuery(jdbcTemplate);
        List<UserModel> result = query.execute("xiaoming");
        Assert.assertEquals(0, result.size());
    }

    @Test
    public void testMappingSqlQuery() {
        jdbcTemplate.update("INSERT INTO test(name) VALUES('xiaoming')");
        MappingSqlQuery mappingSqlQuery = new UserModelMappingSqlQuery(jdbcTemplate);
        Map<String, Object> params = new HashMap<String, Object>();
        params.put("name", "xiaoming");
        UserModel user = (UserModel) mappingSqlQuery.findObjectByNamedParam(params);
        Assert.assertNotNull(user);
    }

    @Test
    public void testSqlFunction() {
        jdbcTemplate.update("INSERT INTO test(name) VALUES('xiaoming')");
        String countSql = "select count(*) from test";
        SqlFunction<Integer> sqlFunction1 = new SqlFunction<Integer>(jdbcTemplate.getDataSource(), countSql);
        Assert.assertEquals(1, sqlFunction1.run());
        String selectSql = "select name from test where name=?";
        SqlFunction<String> sqlFunction2 = new SqlFunction<String>(jdbcTemplate.getDataSource(), selectSql);
        sqlFunction2.declareParameter(new SqlParameter(Types.VARCHAR));
        String name = (String) sqlFunction2.runGeneric(new Object[]{"xiaoming"});
        Assert.assertEquals("xiaoming", name);
    }

    @Test
    public void testSqlUpdate() {
        SqlUpdate insert = new InsertUserModel(jdbcTemplate);
        insert.update("xiaoming");

        String updateSql = "update test set name=? where name=?";
        SqlUpdate update = new SqlUpdate(jdbcTemplate.getDataSource(), updateSql, new int[]{Types.VARCHAR, Types.VARCHAR});
        update.update("xiaoming", "xiaohong");

        String deleteSql = "delete from test where name=:name";
        SqlUpdate delete = new SqlUpdate(jdbcTemplate.getDataSource(), deleteSql, new int[]{Types.VARCHAR});
        Map<String, Object> paramMap = new HashMap<String, Object>();
        paramMap.put("name", "xiaohong");
        delete.updateByNamedParam(paramMap);
    }

    @Test
    public void testStoredProcedure1() {
        StoredProcedure lengthFunction = new HsqldbLengthFunction(jdbcTemplate);
        Map<String, Object> outValues = lengthFunction.execute("test");
        Assert.assertEquals(4, outValues.get("result"));
    }

    public DataSource getMysqlDataSource() {
        String url = "jdbc:mysql://localhost:3306/test";
        DriverManagerDataSource dataSource = new DriverManagerDataSource(url, "root", "123456");
        dataSource.setDriverClassName("com.mysql.jdbc.Driver");
        return dataSource;
    }

    @Test
    public void testStoredProcedure2() {
        JdbcTemplate mysqlJdbcTemplate = new JdbcTemplate(getMysqlDataSource());
        String createFunctionSql = "CREATE FUNCTION FUNCTION_TEST(str VARCHAR(100)) returns INT return LENGTH(str)";
        String dropFunctionSql = "DROP FUNCTION IF EXISTS FUNCTION_TEST";
        mysqlJdbcTemplate.update(dropFunctionSql);
        mysqlJdbcTemplate.update(createFunctionSql);
        StoredProcedure lengthFunction = new MysqlLengthFunction(mysqlJdbcTemplate);
        Map<String, Object> outValues = lengthFunction.execute("test");
        Assert.assertEquals(4, outValues.get("result"));
    }

    @Test
    public void testStoredProcedure3() {
        StoredProcedure procedure = new HsqldbTestProcedure(jdbcTemplate);
        Map<String, Object> outValues = procedure.execute("test");
        Assert.assertEquals(0, outValues.get("outId"));
        Assert.assertEquals("Hello,test", outValues.get("inOutName"));
    }

    @Test
    public void testSimpleJdbcInsert() {
        SimpleJdbcInsert insert = new SimpleJdbcInsert(jdbcTemplate);
        insert.withTableName("test");
        Map<String, Object> args = new HashMap<String, Object>();
        args.put("name", "xiaoming");
        insert.compile();
        insert.execute(args);
        Assert.assertEquals(1, (int) jdbcTemplate.queryForObject("select count(*) from test", Integer.class));

        insert = new SimpleJdbcInsert(jdbcTemplate);
        insert.withTableName("test");
        insert.setGeneratedKeyName("id");
        Number id = insert.executeAndReturnKey(args);
        Assert.assertEquals(1, id);

        insert = new SimpleJdbcInsert(jdbcTemplate);
        insert.withTableName("test");
        insert.setGeneratedKeyName("id");
        int[] updateCount = insert.executeBatch(new Map[]{args, args, args});
        Assert.assertEquals(1, updateCount[0]);
        Assert.assertEquals(5, (int) jdbcTemplate.queryForObject("select count(*) from test", Integer.class));
    }

    @Test
    public void testSimpleJdbcCall1() {
        SimpleJdbcCall call = new SimpleJdbcCall(getMysqlDataSource());
        call.withFunctionName("FUNCTION_TEST");
        call.declareParameters(new SqlOutParameter("result", Types.INTEGER));
        call.declareParameters(new SqlParameter("str", Types.VARCHAR));
        Map<String, Object> outValues = call.execute("test");
        Assert.assertEquals(4, outValues.get("result"));
    }

    @Test
    public void testSimpleJdbcCall2() {
        SimpleJdbcCall call = new SimpleJdbcCall(jdbcTemplate);
        call.withProcedureName("FUNCTION_TEST");
        call.declareParameters(new SqlReturnResultSet("result", new ResultSetExtractor<Integer>() {
            @Override
            public Integer extractData(ResultSet resultSet) throws SQLException, DataAccessException {
                while (resultSet.next()) {
                    return resultSet.getInt(1);
                }
                return 0;
            }
        }));
        call.declareParameters(new SqlParameter("str", Types.VARCHAR));
        Map<String, Object> outValues = call.execute("test");
        Assert.assertEquals(4, outValues.get("result"));
    }

    @Test
    public void testSimpleJdbcCall3() {
        SimpleJdbcCall call = new SimpleJdbcCall(jdbcTemplate);
        call.withProcedureName("PROCEDURE_TEST");
        call.declareParameters(new SqlInOutParameter("inOutName", Types.VARCHAR));
        call.declareParameters(new SqlOutParameter("outId", Types.INTEGER));
        SqlParameterSource params = new MapSqlParameterSource().addValue("inOutName", "test");
        Map<String, Object> outValues = call.execute(params);
        Assert.assertEquals("Hello,test", outValues.get("inOutName"));
        Assert.assertEquals(0, outValues.get("outId"));
    }

    @Test
    public void testFetchKey1() throws SQLException {
        final String insertSql = "insert into test(name) values('xiaoming')";
        KeyHolder generatedKeyHolder = new GeneratedKeyHolder();
        jdbcTemplate.update(new PreparedStatementCreator() {
            @Override
            public PreparedStatement createPreparedStatement(Connection connection) throws SQLException {
                return connection.prepareStatement(insertSql, new String[]{"ID"});
            }
        }, generatedKeyHolder);
        Assert.assertEquals(0, generatedKeyHolder.getKey());
    }

    @Test
    public void testFetchKey2() {
        final String insertSql = "insert into test(name) values('xiaoming')";
        KeyHolder generateKeyHolder = new GeneratedKeyHolder();
        SqlUpdate update = new SqlUpdate();
        update.setJdbcTemplate(jdbcTemplate);
        update.setReturnGeneratedKeys(true);
        //update.setGeneratedKeysColumnNames(new String[]{"ID"});
        update.setSql(insertSql);
        update.update(null, generateKeyHolder);
        Assert.assertEquals(0, generateKeyHolder.getKey());
    }

    @Test
    public void testBatchUpdate1() {
        String insertSql = "insert into test(name) values('name5')";
        String[] batchSql = new String[]{insertSql, insertSql};
        jdbcTemplate.batchUpdate(batchSql);
        Assert.assertEquals(2, (int) jdbcTemplate.queryForObject("select count(*) from test", Integer.class));
    }

    @Test
    public void testBatchUpdate2() {
        String insertSql = "insert into test(name) values(?)";
        final String[] batchValues = new String[] {"name5", "name6"};
        jdbcTemplate.batchUpdate(insertSql, new BatchPreparedStatementSetter() {
            @Override
            public void setValues(PreparedStatement ps, int i) throws SQLException {
                ps.setString(1, batchValues[i]);
            }
            @Override
            public int getBatchSize() {
                return batchValues.length;
            }
        });
        Assert.assertEquals(2, (int) jdbcTemplate.queryForObject("select count(*) from test", Integer.class));
    }

    @Test
    public void testBatchUpdate3() {
        NamedParameterJdbcTemplate namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(jdbcTemplate);
        String insertSql = "insert into test(name) values(:name)";
        UserModel model = new UserModel();
        model.setName("name5");
        SqlParameterSource[] params = SqlParameterSourceUtils.createBatch(new Object[] {model, model});
        namedParameterJdbcTemplate.batchUpdate(insertSql, params);
        Assert.assertEquals(2, (int) jdbcTemplate.queryForObject("select count(*) from test", Integer.class));
    }

    @Test
    public void testBatchUpdate5() {
        SimpleJdbcInsert insert = new SimpleJdbcInsert(jdbcTemplate);
        insert.withTableName("test");
        Map<String, Object> valueMap = new HashMap<String, Object>();
        valueMap.put("name", "name5");
        insert.executeBatch(new Map[] {valueMap, valueMap});
        Assert.assertEquals(2, (int) jdbcTemplate.queryForObject("select count(*) from test", Integer.class));
    }
}
