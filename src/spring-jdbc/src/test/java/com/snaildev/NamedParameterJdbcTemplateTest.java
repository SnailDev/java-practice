package com.snaildev;

import com.snaildev.bean.UserModel;
import org.junit.*;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowCallbackHandler;
import org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.datasource.DriverManagerDataSource;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NamedParameterJdbcTemplateTest {
    private static JdbcTemplate jdbcTemplate;

    @BeforeClass
    public static void setupClass() {
        String url = "jdbc:hsqldb:mem:test";
        String username = "sa";
        String password = "";

        DriverManagerDataSource dataSource = new DriverManagerDataSource(url, username, password);
        dataSource.setDriverClassName("org.hsqldb.jdbcDriver");
        jdbcTemplate = new JdbcTemplate(dataSource);
    }

    @Before
    public void setUp() {
        String createTableSql = "create memory table test(id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, name varchar(100))";
        jdbcTemplate.update(createTableSql);

        String createHsqldbFunctionSql = "CREATE FUNCTION FUNCTION_TEST(str CHAR(100)) returns INT begin atomic return length(str);end";
        jdbcTemplate.update(createHsqldbFunctionSql);

        String createHsqldbProcedureSql = "CREATE PROCEDURE PROCEDURE_TEST(INOUT inOutName VARCHAR(100), OUT outId INT) " +
                "MODIFIES SQL DATA BEGIN ATOMIC " +
                "INSERT INTO test(name) VALUES(inOutName); " +
                "SET outId = IDENTITY(); " +
                "SET inOutName='Hello,'+inOutName;" +
                "END";
        jdbcTemplate.update(createHsqldbProcedureSql);
    }

    @After
    public void tearDown() {
        jdbcTemplate.execute("DROP FUNCTION FUNCTION_TEST");
        jdbcTemplate.execute("DROP PROCEDURE PROCEDURE_TEST");
        String dropTableSql = "drop table test";
        jdbcTemplate.execute(dropTableSql);
    }

    @Test
    public void testNamedParameterJdbcTemplate1() {
        NamedParameterJdbcTemplate namedParameterJdbcTemplate = null;
        namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(jdbcTemplate);
        String insertSql = "insert into test(name) values(:name)";
        String selectSql = "select * from test where name=:name";
        String deleteSql = "delete from test where name=:name";
        Map<String, Object> paramMap = new HashMap<String, Object>();
        paramMap.put("name", "xiaoming");
        namedParameterJdbcTemplate.update(insertSql, paramMap);
        final List<Integer> result = new ArrayList<Integer>();
        namedParameterJdbcTemplate.query(selectSql, paramMap, new RowCallbackHandler() {
            @Override
            public void processRow(ResultSet resultSet) throws SQLException {
                result.add(resultSet.getInt("id"));
            }
        });
        Assert.assertEquals(1, result.size());
        SqlParameterSource paramSource = new MapSqlParameterSource(paramMap);
        namedParameterJdbcTemplate.update(deleteSql, paramSource);
    }

    @Test
    public void testNamedParameterJdbcTemplate2() {
        NamedParameterJdbcTemplate namedParameterJdbcTemplate = null;
        namedParameterJdbcTemplate = new NamedParameterJdbcTemplate(jdbcTemplate);
        UserModel model = new UserModel();
        model.setName("xiaoming");
        String insertSql = "insert into test(name) values(:name)";
        SqlParameterSource paramSource = new BeanPropertySqlParameterSource(model);
        namedParameterJdbcTemplate.update(insertSql, paramSource);
    }
}
